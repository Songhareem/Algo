// 문제 설명
// 1부터 입력받은 숫자 n 사이에 있는 소수의 개수를 반환하는 함수, solution을 만들어 보세요.

// 소수는 1과 자기 자신으로만 나누어지는 수를 의미합니다.
// (1은 소수가 아닙니다.)

// 제한 조건
// n은 2이상 1000000이하의 자연수입니다.
// 입출력 예
// n	result
// 10	4
// 5	3
// 입출력 예 설명
// 입출력 예 #1
// 1부터 10 사이의 소수는 [2,3,5,7] 4개가 존재하므로 4를 반환

// 입출력 예 #2
// 1부터 5 사이의 소수는 [2,3,5] 3개가 존재하므로 3를 반환

// 배운점
//
// 에라토스테네스의 체 : '특정 범위 내의 소수'를 판정하는 데에만 효율적
// 1. 2 ~ n 까지의 숫자를 인자로 가지는 배열 생성
// 2. 2^2 값이 n을 넘지 않는다면, 2의 배수 전부 삭제
// 3. 3^3 값이 n을 넘지 않는다면, 3의 배수 전부 삭제
// 4. 5^5 값  이 n을 넘지 않는다면, 5의 배수 전부 삭제 (4는 2의 배수로 이미 삭제됨)
//
// 에라토스테네스의 채를 (1,0) 의 배열로 생성, 1이라면 소수, 0이라면 합성수로 판단
//
// 제곱 연산은 숫자가 커지므로 오래걸림, 제곱근으로 찾아낼 것
// 동적 배열은 사용하기 쉽고 좋지만, 캐시 히트에서 성능이 떨어짐 => 속도 저하

function solution(n) {
    var answer = 0;
    var arr = new Array(n);    // 1부터 이므로 n개 생성
    arr.fill(1);

    arr[0] = 0;  // 1은 소수가 아님

    for(var i=2; i<=Math.sqrt(n); i++) {
        
        if(arr[i-1] === 0) { continue; }
        for(var j=i*2; j<=n; j+=i) {
            arr[j-1] = 0
        }
    }

    for(var i=0; i<arr.length; i++) {
        answer += arr[i];
    }
    return answer;
}

var n = 10;
console.log('solution: ' + solution(n));
